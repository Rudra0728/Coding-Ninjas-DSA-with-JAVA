/*

Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 

*/
// Solution - 1 : Best Way

public class solution {

	public static void mergeSort(int[] input){
		if(input.length <= 1){
            return;
        }
        int mid = input.length / 2;
        int[] part1 = new int[mid];
        int[] part2 = new int[input.length - mid];
        
        for(int i = 0; i < mid; i++){
            part1[i] = input[i];
        }
        int j = 0;
        for(int i = mid; i < input.length; i++){
            part2[j++] = input[i];
        }
        mergeSort(part1);
        mergeSort(part2);
        mergeArrays(input,part1,part2);
	}
    private static void mergeArrays(int[] input, int[] part1, int[] part2){
        int i = 0, j = 0, k = 0;
        while(i < part1.length && j < part2.length){
            if(part1[i] < part2[j]){
                input[k++] = part1[i++];
            }else{
                input[k++] = part2[j++];
            }
        }
        while(i < part1.length){
            input[k++] = part1[i++];
        }
        while(j < part2.length){
            input[k++] = part2[j++];
        }
    }
}

// Solution - 2

public class Solution {
    	public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
		public static void quickSort(int[] input, int sI, int eI) {
            if(sI >= eI){
                return;
            }
            int pivotPos = partition(input,sI,eI);
            quickSort(input,sI,pivotPos-1);
            quickSort(input,pivotPos+1,eI);
		}
        public static int partition(int[] input,int sI, int eI){
            int pivot = input[sI];
            int count = 0;
            for(int i = sI + 1; i <= eI; i++){
                if(input[i] < pivot){
                    count++;
                }
            }
            int pivotPos = sI + count ;
            int t = input[sI];
            input[sI] = input[pivotPos];
            input[pivotPos] = t;
            int i = sI,j = eI;
            
            while(i < j){
            if (input[i] < pivot)
                ++i;
            else if (input[j] >= pivot)
                --j;
            else {
                int temp = input[i];
                input[i] = input[j];
                input[j] = temp;
                ++i;
                --j;
            }
        }
                
            return pivotPos;
        }
}
